{
 "etype": "InternalError",
 "evalue": "InternalError(1054, \"Unknown column 'gst_category' in 'field list'\")",
 "exception": {
  "args": [
   40,
   49,
   48,
   53,
   52,
   44,
   32,
   34,
   85,
   110,
   107,
   110,
   111,
   119,
   110,
   32,
   99,
   111,
   108,
   117,
   109,
   110,
   32,
   39,
   103,
   115,
   116,
   95,
   99,
   97,
   116,
   101,
   103,
   111,
   114,
   121,
   39,
   32,
   105,
   110,
   32,
   39,
   102,
   105,
   101,
   108,
   100,
   32,
   108,
   105,
   115,
   116,
   39,
   34,
   41
  ],
  "with_traceback": [
   60,
   98,
   117,
   105,
   108,
   116,
   45,
   105,
   110,
   32,
   109,
   101,
   116,
   104,
   111,
   100,
   32,
   119,
   105,
   116,
   104,
   95,
   116,
   114,
   97,
   99,
   101,
   98,
   97,
   99,
   107,
   32,
   111,
   102,
   32,
   73,
   110,
   116,
   101,
   114,
   110,
   97,
   108,
   69,
   114,
   114,
   111,
   114,
   32,
   111,
   98,
   106,
   101,
   99,
   116,
   62
  ]
 },
 "frames": [
  {
   "call": "(request=<Request 'http://gne3.gndec.ac.in/api/method/frappe.desk.form.save.savedocs' [POST]>)",
   "dump": {
    "frappe. api": "<module 'frappe.api' from '/home/hp/frappe-bench/apps/frappe/frappe/api.py'>",
    "frappe.api. handle": "<function handle>",
    "global frappe": "<module 'frappe' from '/home/hp/frappe-bench/apps/frappe/frappe/__init__.py'>",
    "response": "None"
   },
   "file": "/home/hp/frappe-bench/apps/frappe/frappe/app.py",
   "func": "application",
   "lines": {
    "65": "",
    "66": "\t\telif request.path.startswith(\"/api/\"):",
    "67": "\t\t\tresponse = frappe.api.handle()",
    "68": "",
    "69": "\t\telif request.path.startswith('/backups'):"
   },
   "lnum": 67
  },
  {
   "call": "()",
   "dump": {
    "frappe. handler": "<module 'frappe.handler' from '/home/hp/frappe-bench/apps/frappe/frappe/handler.py'>",
    "frappe.handler. handle": "<function handle>",
    "global frappe": "<module 'frappe' from '/home/hp/frappe-bench/apps/frappe/frappe/__init__.py'>"
   },
   "file": "/home/hp/frappe-bench/apps/frappe/frappe/api.py",
   "func": "handle",
   "lines": {
    "57": "\tif call==\"method\":",
    "58": "\t\tfrappe.local.form_dict.cmd = doctype",
    "59": "\t\treturn frappe.handler.handle()",
    "60": "",
    "61": "\telif call==\"resource\":"
   },
   "lnum": 59
  },
  {
   "call": "()",
   "dump": {
    "cmd": "'frappe.desk.form.save.savedocs'",
    "data": "None",
    "global execute_cmd": "<function execute_cmd>"
   },
   "file": "/home/hp/frappe-bench/apps/frappe/frappe/handler.py",
   "func": "handle",
   "lines": {
    "22": "",
    "23": "\tif cmd!='login':",
    "24": "\t\tdata = execute_cmd(cmd)",
    "25": "",
    "26": "\t# data can be an empty string or list which are valid responses"
   },
   "lnum": 24
  },
  {
   "call": "(cmd='frappe.desk.form.save.savedocs', from_async=False)",
   "dump": {
    "frappe. call": "<function call>",
    "frappe. form_dict": "{'doc': '{\"docstatus\":0,\"doctype\":\"Address\",\"nam... 'Save', 'cmd': 'frappe.desk.form.save.savedocs'}",
    "global frappe": "<module 'frappe' from '/home/hp/frappe-bench/apps/frappe/frappe/__init__.py'>",
    "method": "<function savedocs>"
   },
   "file": "/home/hp/frappe-bench/apps/frappe/frappe/handler.py",
   "func": "execute_cmd",
   "lines": {
    "62": "\tis_valid_http_method(method)",
    "63": "",
    "64": "\treturn frappe.call(method, **frappe.form_dict)",
    "65": "",
    "66": "def is_whitelisted(method):"
   },
   "lnum": 64
  },
  {
   "call": "(fn=<function savedocs>, *args=(), **kwargs={'action': 'Save', 'cmd': 'frappe.desk.form.save.savedocs', 'doc': '{\"docstatus\":0,\"doctype\":\"Address\",\"name\":\"New A...00009\",\"gstin\":\"22AAA021451BH\",\"tax_category\":\"\"}'})",
   "dump": {
    "args": "()",
    "fn": "<function savedocs>",
    "newargs": "{'action': 'Save', 'doc': '{\"docstatus\":0,\"doctype\":\"Address\",\"name\":\"New A...00009\",\"gstin\":\"22AAA021451BH\",\"tax_category\":\"\"}'}"
   },
   "file": "/home/hp/frappe-bench/apps/frappe/frappe/__init__.py",
   "func": "call",
   "lines": {
    "1069": "\tnewargs = get_newargs(fn, kwargs)",
    "1070": "",
    "1071": "\treturn fn(*args, **newargs)",
    "1072": "",
    "1073": "def get_newargs(fn, kwargs):"
   },
   "lnum": 1071
  },
  {
   "call": "(doc=<frappe.contacts.doctype.address.address.Address object>, action='Save')",
   "dump": {
    "doc": "<frappe.contacts.doctype.address.address.Address object>",
    "doc. save": "<bound method Document.save of <frappe.contacts.doctype.address.address.Address object>>"
   },
   "file": "/home/hp/frappe-bench/apps/frappe/frappe/desk/form/save.py",
   "func": "savedocs",
   "lines": {
    "19": "\t\t\tdoc.submit()",
    "20": "\t\telse:",
    "21": "\t\t\tdoc.save()",
    "22": "",
    "23": "\t\t# update recent documents"
   },
   "lnum": 21
  },
  {
   "call": "(self=<frappe.contacts.doctype.address.address.Address object>, *args=(), **kwargs={})",
   "dump": {
    "args": "()",
    "kwargs": "{}",
    "self": "<frappe.contacts.doctype.address.address.Address object>",
    "self. _save": "<bound method Document._save of <frappe.contacts.doctype.address.address.Address object>>"
   },
   "file": "/home/hp/frappe-bench/apps/frappe/frappe/model/document.py",
   "func": "save",
   "lines": {
    "271": "\tdef save(self, *args, **kwargs):",
    "272": "\t\t\"\"\"Wrapper for _save\"\"\"",
    "273": "\t\treturn self._save(*args, **kwargs)",
    "274": "",
    "275": "\tdef _save(self, ignore_permissions=None, ignore_version=None):"
   },
   "lnum": 273
  },
  {
   "call": "(self=<frappe.contacts.doctype.address.address.Address object>, ignore_permissions=None, ignore_version=None)",
   "dump": {
    "self": "<frappe.contacts.doctype.address.address.Address object>",
    "self. insert": "<bound method Document.insert of <frappe.contacts.doctype.address.address.Address object>>"
   },
   "file": "/home/hp/frappe-bench/apps/frappe/frappe/model/document.py",
   "func": "_save",
   "lines": {
    "294": "",
    "295": "\t\tif self.get(\"__islocal\") or not self.get(\"name\"):",
    "296": "\t\t\tself.insert()",
    "297": "\t\t\treturn",
    "298": ""
   },
   "lnum": 296
  },
  {
   "call": "(self=<frappe.contacts.doctype.address.address.Address object>, ignore_permissions=None, ignore_links=None, ignore_if_duplicate=False, ignore_mandatory=None)",
   "dump": {
    "self": "<frappe.contacts.doctype.address.address.Address object>",
    "self. run_before_save_methods": "<bound method Document.run_before_save_methods o...contacts.doctype.address.address.Address object>>"
   },
   "file": "/home/hp/frappe-bench/apps/frappe/frappe/model/document.py",
   "func": "insert",
   "lines": {
    "228": "",
    "229": "\t\tself.flags.in_insert = True",
    "230": "\t\tself.run_before_save_methods()",
    "231": "\t\tself._validate()",
    "232": "\t\tself.set_docstatus()"
   },
   "lnum": 230
  },
  {
   "call": "(self=<frappe.contacts.doctype.address.address.Address object>)",
   "dump": {
    "self": "<frappe.contacts.doctype.address.address.Address object>",
    "self. run_method": "<bound method Document.run_method of <frappe.contacts.doctype.address.address.Address object>>"
   },
   "file": "/home/hp/frappe-bench/apps/frappe/frappe/model/document.py",
   "func": "run_before_save_methods",
   "lines": {
    "894": "\t\tif self._action==\"save\":",
    "895": "\t\t\tself.run_method(\"before_validate\")",
    "896": "\t\t\tself.run_method(\"validate\")",
    "897": "\t\t\tself.run_method(\"before_save\")",
    "898": "\t\telif self._action==\"submit\":"
   },
   "lnum": 896
  },
  {
   "call": "(self=<frappe.contacts.doctype.address.address.Address object>, method='validate', *args=(), **kwargs={})",
   "dump": {
    "Document. hook": "<function Document.hook>",
    "args": "()",
    "fn": "<function Document.run_method.<locals>.<lambda>>",
    "global Document": "<class 'frappe.model.document.Document'>",
    "kwargs": "{}",
    "out": "undefined",
    "self": "<frappe.contacts.doctype.address.address.Address object>"
   },
   "file": "/home/hp/frappe-bench/apps/frappe/frappe/model/document.py",
   "func": "run_method",
   "lines": {
    "795": "",
    "796": "\t\tfn.__name__ = str(method)",
    "797": "\t\tout = Document.hook(fn)(self, *args, **kwargs)",
    "798": "",
    "799": "\t\tself.run_notifications(method)"
   },
   "lnum": 797
  },
  {
   "call": "(self=<frappe.contacts.doctype.address.address.Address object>, *args=(), **kwargs={})",
   "dump": {
    "args": "()",
    "composed": "<function Document.hook.<locals>.compose.<locals>.runner>",
    "kwargs": "{}",
    "method": "'validate'",
    "self": "<frappe.contacts.doctype.address.address.Address object>"
   },
   "file": "/home/hp/frappe-bench/apps/frappe/frappe/model/document.py",
   "func": "composer",
   "lines": {
    "1071": "",
    "1072": "\t\t\tcomposed = compose(f, *hooks)",
    "1073": "\t\t\treturn composed(self, method, *args, **kwargs)",
    "1074": "",
    "1075": "\t\treturn composer"
   },
   "lnum": 1073
  },
  {
   "call": "(self=<frappe.contacts.doctype.address.address.Address object>, method='validate', *args=(), **kwargs={})",
   "dump": {
    "add_to_return_value": "<function Document.hook.<locals>.add_to_return_value>",
    "args": "()",
    "f": "<function validate_gstin_for_india>",
    "kwargs": "{}",
    "method": "'validate'",
    "self": "<frappe.contacts.doctype.address.address.Address object>"
   },
   "file": "/home/hp/frappe-bench/apps/frappe/frappe/model/document.py",
   "func": "runner",
   "lines": {
    "1056": "\t\t\t\tadd_to_return_value(self, fn(self, *args, **kwargs))",
    "1057": "\t\t\t\tfor f in hooks:",
    "1058": "\t\t\t\t\tadd_to_return_value(self, f(self, method, *args, **kwargs))",
    "1059": "",
    "1060": "\t\t\t\treturn self._return_value"
   },
   "lnum": 1058
  },
  {
   "call": "(doc=<frappe.contacts.doctype.address.address.Address object>, method='validate')",
   "dump": {
    "frappe. db": "<frappe.database.mariadb.database.MariaDBDatabase object>",
    "frappe.db. get_value": "<bound method Database.get_value of <frappe.database.mariadb.database.MariaDBDatabase object>>",
    "global frappe": "<module 'frappe' from '/home/hp/frappe-bench/apps/frappe/frappe/__init__.py'>",
    "gst_category": "[]",
    "link_doctype": "'Customer'",
    "link_name": "'Lakshay Chopra'"
   },
   "file": "/home/hp/frappe-bench/apps/erpnext/erpnext/regional/india/utils.py",
   "func": "validate_gstin_for_india",
   "lines": {
    "29": "",
    "30": "\t\tif link_doctype in [\"Customer\", \"Supplier\"]:",
    "31": "\t\t\tgst_category = frappe.db.get_value(link_doctype, {'name': link_name}, ['gst_category'])",
    "32": "",
    "33": "\tdoc.gstin = doc.gstin.upper().strip()"
   },
   "lnum": 31
  },
  {
   "call": "(self=<frappe.database.mariadb.database.MariaDBDatabase object>, doctype='Customer', filters={'name': 'Lakshay Chopra'}, fieldname=['gst_category'], ignore=None, as_dict=False, debug=False, order_by=None, cache=False)",
   "dump": {
    "cache": "False",
    "order_by": "None"
   },
   "file": "/home/hp/frappe-bench/apps/frappe/frappe/database/database.py",
   "func": "get_value",
   "lines": {
    "399": "",
    "400": "\t\tret = self.get_values(doctype, filters, fieldname, ignore, as_dict, debug,",
    "401": "\t\t\torder_by, cache=cache)",
    "402": "",
    "403": "\t\treturn ((len(ret[0]) > 1 or as_dict) and ret[0] or ret[0][0]) if ret else None"
   },
   "lnum": 401
  },
  {
   "call": "(self=<frappe.database.mariadb.database.MariaDBDatabase object>, doctype='Customer', filters={'name': 'Lakshay Chopra'}, fieldname=['gst_category'], ignore=None, as_dict=False, debug=False, order_by='modified desc', update=None, cache=False)",
   "dump": {
    "as_dict": "False",
    "debug": "False",
    "doctype": "'Customer'",
    "fields": "['gst_category']",
    "filters": "{'name': 'Lakshay Chopra'}",
    "order_by": "'modified desc'",
    "out": "None",
    "self": "<frappe.database.mariadb.database.MariaDBDatabase object>",
    "self. _get_values_from_table": "<bound method Database._get_values_from_table of...atabase.mariadb.database.MariaDBDatabase object>>",
    "update": "None"
   },
   "file": "/home/hp/frappe-bench/apps/frappe/frappe/database/database.py",
   "func": "get_values",
   "lines": {
    "443": "\t\t\tif (filters is not None) and (filters!=doctype or doctype==\"DocType\"):",
    "444": "\t\t\t\ttry:",
    "445": "\t\t\t\t\tout = self._get_values_from_table(fields, filters, doctype, as_dict, debug, order_by, update)",
    "446": "\t\t\t\texcept Exception as e:",
    "447": "\t\t\t\t\tif ignore and (frappe.db.is_missing_column(e) or frappe.db.is_table_missing(e)):"
   },
   "lnum": 445
  },
  {
   "call": "(self=<frappe.database.mariadb.database.MariaDBDatabase object>, fields=['gst_category'], filters={'name': 'Lakshay Chopra'}, doctype='Customer', as_dict=False, debug=False, order_by='order by modified desc', update=None)",
   "dump": {
    "as_dict": "False",
    "debug": "False",
    "update": "None"
   },
   "file": "/home/hp/frappe-bench/apps/frappe/frappe/database/database.py",
   "func": "_get_values_from_table",
   "lines": {
    "590": "\t\tr = self.sql(\"select {0} from `tab{1}` {2} {3} {4}\"",
    "591": "\t\t\t.format(fl, doctype, \"where\" if conditions else \"\", conditions, order_by), values,",
    "592": "\t\t\tas_dict=as_dict, debug=debug, update=update)",
    "593": "",
    "594": "\t\treturn r"
   },
   "lnum": 592
  },
  {
   "call": "(self=<frappe.database.mariadb.database.MariaDBDatabase object>, query='select `gst_category` from `tabCustomer` where `name` = %(name)s order by modified desc', values={'name': 'Lakshay Chopra'}, as_dict=False, as_list=0, formatted=0, debug=False, ignore_ddl=0, as_utf8=0, auto_commit=0, update=None, explain=False)",
   "dump": {
    "query": "'select `gst_category` from `tabCustomer` where `name` = %(name)s order by modified desc'",
    "self": "<frappe.database.mariadb.database.MariaDBDatabase object>",
    "self. _cursor": "<pymysql.cursors.Cursor object>",
    "self._cursor. execute": "<bound method Cursor.execute of <pymysql.cursors.Cursor object>>",
    "values": "{'name': 'Lakshay Chopra'}"
   },
   "file": "/home/hp/frappe-bench/apps/frappe/frappe/database/database.py",
   "func": "sql",
   "lines": {
    "154": "\t\t\t\t\tfrappe.log(values)",
    "155": "\t\t\t\t\tfrappe.log(\">>>>\")",
    "156": "\t\t\t\tself._cursor.execute(query, values)",
    "157": "",
    "158": "\t\t\t\tif frappe.flags.in_migrate:"
   },
   "lnum": 156
  },
  {
   "call": "(self=<pymysql.cursors.Cursor object>, query=\"select `gst_category` from `tabCustomer` where `name` = 'Lakshay Chopra' order by modified desc\", args={'name': 'Lakshay Chopra'})",
   "dump": {
    "query": "\"select `gst_category` from `tabCustomer` where `name` = 'Lakshay Chopra' order by modified desc\"",
    "result": "undefined",
    "self": "<pymysql.cursors.Cursor object>",
    "self. _query": "<bound method Cursor._query of <pymysql.cursors.Cursor object>>"
   },
   "file": "/home/hp/frappe-bench/env/lib/python3.6/site-packages/pymysql/cursors.py",
   "func": "execute",
   "lines": {
    "168": "        query = self.mogrify(query, args)",
    "169": "",
    "170": "        result = self._query(query)",
    "171": "        self._executed = query",
    "172": "        return result"
   },
   "lnum": 170
  },
  {
   "call": "(self=<pymysql.cursors.Cursor object>, q=\"select `gst_category` from `tabCustomer` where `name` = 'Lakshay Chopra' order by modified desc\")",
   "dump": {
    "conn": "<pymysql.connections.Connection object>",
    "conn. query": "<bound method Connection.query of <pymysql.connections.Connection object>>",
    "q": "\"select `gst_category` from `tabCustomer` where `name` = 'Lakshay Chopra' order by modified desc\""
   },
   "file": "/home/hp/frappe-bench/env/lib/python3.6/site-packages/pymysql/cursors.py",
   "func": "_query",
   "lines": {
    "326": "        self._last_executed = q",
    "327": "        self._clear_result()",
    "328": "        conn.query(q)",
    "329": "        self._do_get_result()",
    "330": "        return self.rowcount"
   },
   "lnum": 328
  },
  {
   "call": "(self=<pymysql.connections.Connection object>, sql=b\"select `gst_category` from `tabCustomer` where `name` = 'Lakshay Chopra' order by modified desc\", unbuffered=False)",
   "dump": {
    "self": "<pymysql.connections.Connection object>",
    "self. _affected_rows": "0",
    "self. _read_query_result": "<bound method Connection._read_query_result of <pymysql.connections.Connection object>>",
    "unbuffered": "False"
   },
   "file": "/home/hp/frappe-bench/env/lib/python3.6/site-packages/pymysql/connections.py",
   "func": "query",
   "lines": {
    "515": "                sql = sql.encode(self.encoding, 'surrogateescape')",
    "516": "        self._execute_command(COMMAND.COM_QUERY, sql)",
    "517": "        self._affected_rows = self._read_query_result(unbuffered=unbuffered)",
    "518": "        return self._affected_rows",
    "519": ""
   },
   "lnum": 517
  },
  {
   "call": "(self=<pymysql.connections.Connection object>, unbuffered=False)",
   "dump": {
    "result": "<pymysql.connections.MySQLResult object>",
    "result. read": "<bound method MySQLResult.read of <pymysql.connections.MySQLResult object>>"
   },
   "file": "/home/hp/frappe-bench/env/lib/python3.6/site-packages/pymysql/connections.py",
   "func": "_read_query_result",
   "lines": {
    "730": "        else:",
    "731": "            result = MySQLResult(self)",
    "732": "            result.read()",
    "733": "        self._result = result",
    "734": "        if result.server_status is not None:"
   },
   "lnum": 732
  },
  {
   "call": "(self=<pymysql.connections.MySQLResult object>)",
   "dump": {
    "first_packet": "undefined",
    "self": "<pymysql.connections.MySQLResult object>",
    "self. connection": "None",
    "self.connection._read_packet": "undefined"
   },
   "file": "/home/hp/frappe-bench/env/lib/python3.6/site-packages/pymysql/connections.py",
   "func": "read",
   "lines": {
    "1073": "    def read(self):",
    "1074": "        try:",
    "1075": "            first_packet = self.connection._read_packet()",
    "1076": "",
    "1077": "            if first_packet.is_ok_packet():"
   },
   "lnum": 1075
  },
  {
   "call": "(self=<pymysql.connections.Connection object>, packet_type=<class 'pymysql.protocol.MysqlPacket'>)",
   "dump": {
    "packet": "<pymysql.protocol.MysqlPacket object>",
    "packet. check_error": "<bound method MysqlPacket.check_error of <pymysql.protocol.MysqlPacket object>>"
   },
   "file": "/home/hp/frappe-bench/env/lib/python3.6/site-packages/pymysql/connections.py",
   "func": "_read_packet",
   "lines": {
    "682": "",
    "683": "        packet = packet_type(buff, self.encoding)",
    "684": "        packet.check_error()",
    "685": "        return packet",
    "686": ""
   },
   "lnum": 684
  },
  {
   "call": "(self=<pymysql.protocol.MysqlPacket object>)",
   "dump": {
    "err. raise_mysql_exception": "<function raise_mysql_exception>",
    "global err": "<module 'pymysql.err' from '/home/hp/frappe-bench/env/lib/python3.6/site-packages/pymysql/err.py'>",
    "self": "<pymysql.protocol.MysqlPacket object>",
    "self. _data": "b\"\\xff\\x1e\\x04#42S22Unknown column 'gst_category' in 'field list'\""
   },
   "file": "/home/hp/frappe-bench/env/lib/python3.6/site-packages/pymysql/protocol.py",
   "func": "check_error",
   "lines": {
    "218": "            errno = self.read_uint16()",
    "219": "            if DEBUG: print(\"errno =\", errno)",
    "220": "            err.raise_mysql_exception(self._data)",
    "221": "",
    "222": "    def dump(self):"
   },
   "lnum": 220
  },
  {
   "call": "(data=b\"\\xff\\x1e\\x04#42S22Unknown column 'gst_category' in 'field list'\")",
   "dump": {
    "errno": "1054",
    "errorclass": "<class 'pymysql.err.InternalError'>",
    "errval": "\"Unknown column 'gst_category' in 'field list'\""
   },
   "file": "/home/hp/frappe-bench/env/lib/python3.6/site-packages/pymysql/err.py",
   "func": "raise_mysql_exception",
   "lines": {
    "105": "        errval = data[9:].decode('utf-8', 'replace')",
    "106": "    else:",
    "107": "        errval = data[3:].decode('utf-8', 'replace')",
    "108": "    errorclass = error_map.get(errno, InternalError)",
    "109": "    raise errorclass(errno, errval)"
   },
   "lnum": 109
  }
 ],
 "locals": {
  "data": "b\"\\xff\\x1e\\x04#42S22Unknown column 'gst_category' in 'field list'\"",
  "errno": "1054",
  "errorclass": "<class 'pymysql.err.InternalError'>",
  "errval": "Unknown column 'gst_category' in 'field list'",
  "is_41": "True"
 },
 "pyver": "Python 3.6.9: /home/hp/frappe-bench/env/bin/python3 (prefix: /home/hp/frappe-bench/env)",
 "timestamp": "2021-03-05 22:27:29.069807",
 "traceback": "Traceback (most recent call last):\n  File \"/home/hp/frappe-bench/apps/frappe/frappe/app.py\", line 67, in application\n    response = frappe.api.handle()\n  File \"/home/hp/frappe-bench/apps/frappe/frappe/api.py\", line 59, in handle\n    return frappe.handler.handle()\n  File \"/home/hp/frappe-bench/apps/frappe/frappe/handler.py\", line 24, in handle\n    data = execute_cmd(cmd)\n  File \"/home/hp/frappe-bench/apps/frappe/frappe/handler.py\", line 64, in execute_cmd\n    return frappe.call(method, **frappe.form_dict)\n  File \"/home/hp/frappe-bench/apps/frappe/frappe/__init__.py\", line 1071, in call\n    return fn(*args, **newargs)\n  File \"/home/hp/frappe-bench/apps/frappe/frappe/desk/form/save.py\", line 21, in savedocs\n    doc.save()\n  File \"/home/hp/frappe-bench/apps/frappe/frappe/model/document.py\", line 273, in save\n    return self._save(*args, **kwargs)\n  File \"/home/hp/frappe-bench/apps/frappe/frappe/model/document.py\", line 296, in _save\n    self.insert()\n  File \"/home/hp/frappe-bench/apps/frappe/frappe/model/document.py\", line 230, in insert\n    self.run_before_save_methods()\n  File \"/home/hp/frappe-bench/apps/frappe/frappe/model/document.py\", line 896, in run_before_save_methods\n    self.run_method(\"validate\")\n  File \"/home/hp/frappe-bench/apps/frappe/frappe/model/document.py\", line 797, in run_method\n    out = Document.hook(fn)(self, *args, **kwargs)\n  File \"/home/hp/frappe-bench/apps/frappe/frappe/model/document.py\", line 1073, in composer\n    return composed(self, method, *args, **kwargs)\n  File \"/home/hp/frappe-bench/apps/frappe/frappe/model/document.py\", line 1058, in runner\n    add_to_return_value(self, f(self, method, *args, **kwargs))\n  File \"/home/hp/frappe-bench/apps/erpnext/erpnext/regional/india/utils.py\", line 31, in validate_gstin_for_india\n    gst_category = frappe.db.get_value(link_doctype, {'name': link_name}, ['gst_category'])\n  File \"/home/hp/frappe-bench/apps/frappe/frappe/database/database.py\", line 401, in get_value\n    order_by, cache=cache)\n  File \"/home/hp/frappe-bench/apps/frappe/frappe/database/database.py\", line 445, in get_values\n    out = self._get_values_from_table(fields, filters, doctype, as_dict, debug, order_by, update)\n  File \"/home/hp/frappe-bench/apps/frappe/frappe/database/database.py\", line 592, in _get_values_from_table\n    as_dict=as_dict, debug=debug, update=update)\n  File \"/home/hp/frappe-bench/apps/frappe/frappe/database/database.py\", line 156, in sql\n    self._cursor.execute(query, values)\n  File \"/home/hp/frappe-bench/env/lib/python3.6/site-packages/pymysql/cursors.py\", line 170, in execute\n    result = self._query(query)\n  File \"/home/hp/frappe-bench/env/lib/python3.6/site-packages/pymysql/cursors.py\", line 328, in _query\n    conn.query(q)\n  File \"/home/hp/frappe-bench/env/lib/python3.6/site-packages/pymysql/connections.py\", line 517, in query\n    self._affected_rows = self._read_query_result(unbuffered=unbuffered)\n  File \"/home/hp/frappe-bench/env/lib/python3.6/site-packages/pymysql/connections.py\", line 732, in _read_query_result\n    result.read()\n  File \"/home/hp/frappe-bench/env/lib/python3.6/site-packages/pymysql/connections.py\", line 1075, in read\n    first_packet = self.connection._read_packet()\n  File \"/home/hp/frappe-bench/env/lib/python3.6/site-packages/pymysql/connections.py\", line 684, in _read_packet\n    packet.check_error()\n  File \"/home/hp/frappe-bench/env/lib/python3.6/site-packages/pymysql/protocol.py\", line 220, in check_error\n    err.raise_mysql_exception(self._data)\n  File \"/home/hp/frappe-bench/env/lib/python3.6/site-packages/pymysql/err.py\", line 109, in raise_mysql_exception\n    raise errorclass(errno, errval)\npymysql.err.InternalError: (1054, \"Unknown column 'gst_category' in 'field list'\")\n"
}